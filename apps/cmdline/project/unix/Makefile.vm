# muutujad
CC=g++
FLAGS=-O2 -DNDEBUG -std=gnu++0x -fno-delete-null-pointer-checks -pthread -fdata-sections -ffunction-sections -Wl,--gc-sections
FLAGS_DB=-ggdb  -D_DEBUG -fno-inline -std=gnu++0x -fno-delete-null-pointer-checks -pthread -fdata-sections -ffunction-sections -Wl,--gc-sections
ROOTDIR=../../../..
LIBS=etyhh.ar etana.ar fsc.ar

# funktsioonid
define compile2ar
	mkdir -p $(1).tmp
	cd $(1).tmp && $(CC) $(FLAGS) -c $(2)/*.cpp
	cd $(1).tmp && ar -r ../$(1) *.o
	-rm -rf $(1).tmp
endef	

define compile2dbar
	mkdir -p $(1).tmp
	cd $(1).tmp && $(CC) $(FLAGS_DB) -c $(2)/*.cpp
	cd $(1).tmp && ar -r ../$(1) *.o
	-rm -rf $(1).tmp
endef	

define compile2bin
	mkdir -p $(1).tmp
	cd $(1).tmp && $(CC) $(FLAGS) -o ../$(1) $(2)/*.cpp $(addprefix ../,$(LIBS))
	strip $(1)
	-rm -rf $(1).tmp
	echo == $(1)
endef	

define compile2dbbin
	mkdir -p $(1).tmp
	cd $(1).tmp && $(CC) $(FLAGS_DB) -o ../$(1) $(2)/*.cpp $(addprefix ../,$(LIBS:.ar=.db.ar))
	-rm -rf $(1).tmp
	echo == $(1)
endef	

# sihid
all : \
		vmeta vmeta.db       \
		vmyhh vmyhh.db		 \
		etyhh.ar etyhh.db.ar \
		etana.ar etana.db.ar \
		fsc.ar   fsc.db.ar   \

clean :
	-rm -rf vmeta*
	-rm -rf vmeta.db*
	-rm -rf etyhh.ar*
	-rm -rf etyhh.db.ar*
	-rm -rf etana.ar*
	-rm -rf etana.db.ar*
	-rm -rf fsc.ar*
	-rm -rf fsc.db.ar*

# teegid	
etyhh.ar : $(wildcard $(ROOTDIR)/lib/etyhh/*.cpp) $(wildcard $(ROOTDIR)/lib/etyhh/*.h)
	$(call compile2ar,$@,../$(ROOTDIR)/lib/$(basename $@))

etyhh.db.ar : $(wildcard $(ROOTDIR)/lib/etyhh/*.cpp) $(wildcard $(ROOTDIR)/lib/etyhh/*.h)
	$(call compile2dbar,$@,../$(ROOTDIR)/lib/$(basename $(basename $@)))

etana.ar : $(wildcard $(ROOTDIR)/lib/etana/*.cpp) $(wildcard $(ROOTDIR)/lib/etana/*.h)
	$(call compile2ar,$@,../$(ROOTDIR)/lib/$(basename $@))

etana.db.ar : $(wildcard $(ROOTDIR)/lib/etana/*.cpp) $(wildcard $(ROOTDIR)/lib/etana/*.h)
	$(call compile2dbar,$@,../$(ROOTDIR)/lib/$(basename $(basename $@)))

fsc.ar : $(wildcard $(ROOTDIR)/lib/fsc/*.cpp) $(wildcard $(ROOTDIR)/lib/fsc/*.h)
	$(call compile2ar,$@,../$(ROOTDIR)/lib/$(basename $@))

fsc.db.ar : $(wildcard $(ROOTDIR)/lib/fsc/*.cpp) $(wildcard $(ROOTDIR)/lib/fsc/*.h)
	$(call compile2dbar,$@,../$(ROOTDIR)/lib/$(basename $(basename $@)))

# programmid
vmeta : $(LIBS) $(wildcard $(ROOTDIR)/apps/cmdline/vmeta/*.cpp) $(wildcard $(ROOTDIR)/apps/cmdline/vmeta/*.h)
	$(call compile2bin,$@,../$(ROOTDIR)/apps/cmdline/$(basename $@))

vmeta.db : $(LIBS) $(wildcard $(ROOTDIR)/apps/cmdline/vmeta/*.cpp) $(wildcard $(ROOTDIR)/apps/cmdline/vmeta/*.h)
	$(call compile2dbbin,$@,../$(ROOTDIR)/apps/cmdline/$(basename $@))

vmyhh : $(LIBS) $(wildcard $(ROOTDIR)/apps/cmdline/vmyhh/*.cpp) $(wildcard $(ROOTDIR)/apps/cmdline/vmyhh/*.h)
	$(call compile2bin,$@,../$(ROOTDIR)/apps/cmdline/$(basename $@))

vmyhh.db : $(LIBS) $(wildcard $(ROOTDIR)/apps/cmdline/vmyhh/*.cpp) $(wildcard $(ROOTDIR)/apps/cmdline/vmyhh/*.h)
	$(call compile2dbbin,$@,../$(ROOTDIR)/apps/cmdline/$(basename $@))


